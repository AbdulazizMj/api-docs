FORMAT: 1A
HOST: https://kitsu.io/api/edge

# Kitsu API

Kitsu is a modern anime discovery platform that helps you track the anime you're watching, discover new anime and socialize with other fans.

With the Kitsu API you can do everything the client can do and much more.

# Versioning

Every year, we release a new version of the API, numbered by the last two digits of the current year. For example, the root URL of this (the 2017) release is `https://kitsu.io/api/17/`.

No fields, endpoints, or resources will be removed until the next year's release, but may be changed to return empty values (arrays, empty strings, etc.) before then. Fields, endpoints, and resources may be added throughout the lifetime of a release.

In addition to these versioned APIs, there is access to the same API our website uses. However, this offers no guarantees: anything could change at any time. We suggest you don't use this, but if you need to, it can be accessed at `https://kitsu.io/api/edge/`.

# Life Cycle

Upon release of a new version, the previous version will be maintained for one year or until usage drops below 2% of API traffic.

During this period, it will not be updated to have any new fields, endpoints, or resources. You are expected to keep your applications running on the latest version of the API. For most applications, upgrading should take no more than a few hours of work.

# JSON API

The Kitsu API implements the JSON API specification. This means there are some notable semantics to how you consume it, but understanding it will take a lot of the work of using it out of your hands.

These docs will include a short overview of the capabilities, but you can consult the [JSON API Specification][jsonapi] for more information.

As per the JSON API specification, all requests to the API should contain these headers:

```
Accept: application/vnd.api+json
Content-Type: application/vnd.api+json
```

You can be more specific about the data you want to retrieve by using URL parameters and are outlined below.

**Note:** This documentation will display parameters with brackets (`[` and `]`) for readability, but actual URLs will need to be encoded (`%5B` and `%5D`).

## Filtering and Search

Filtering lets you query data that contains certain matching attributes or relationships. These take the form of `filter[attribute]=value`.

For example, you can request all the anime of the Adventure genre using `/anime?filter[genres]=adventure`.

You can also search for media based on the query text by using `filter[text]={query}`.

## Pagination

You can choose how much of a resource to receive by specifying pagination parameters. Pagination is supported via `limit` and `offset`. Resources are paginated in groups of `20` by default.

`/anime?page[limit]=5&page[offset]=0`

The response will include URLs for the first, next and last page of resources in the `links` object based on your request.

```
"links": {
    "first": "https://kitsu.io/api/edge/anime?page[limit]=5&page[offset]=0",
    "next": "https://kitsu.io/api/edge/anime?page[limit]=5&page[offset]=5",
    "last": "https://kitsu.io/api/edge/anime?page[limit]=5&page[offset]=12062"
}
```

## Sorting

Sorting by attributes is also supported. By default, sorts are applied in ascending order. You can request a descending order by prepending `-` to the parameter. You can use a comma-delimited list to sort by multiple attributes.

`/users?sort=-followersCount,-followingCount`

## Includes

You can include related resources with `include=[relationship]`. You can also specify successive relationships using a `.`. A comma-delimited list can be used to request multiple relationships.

`/library-entries?include=user,anime.genres`

## Sparse Fieldsets

You can request a resource to only return a specific set of fields in its response. For example, to only receive a user's name and creation date:

`/users?fields[users]=name,createdAt`

## Client Implementations

JSON API has a great advantage in that since its standardised, API-agnostic tools can be made to abstract away the semantics of consuming and working with the data. It is recommended that you use a JSON API client to implement the Kitsu API for this reason.

Many implementations in over 13 languages can be found on the [JSON API website][jsonapi-client].

# Questions?

If you have any questions, you can join our Slack by sending an email to josh@kitsu.io or pinging [@wopian][wopian], [@matthewdias][matthewdias] or [@nuck][nuck] on Kitsu.

[jsonapi]:http://jsonapi.org/format/
[jsonapi-client]:http://jsonapi.org/implementations/#client-libraries
[wopian]:https://kitsu.io/users/wopian
[matthewdias]:https://kitsu.io/users/matthewdias
[nuck]:https://kitsu.io/users/nuck

# Group Authentication

Kitsu uses OAuth 2 for authentication. It is not required to send authenticated requests for most endpoints.

After registering your app, you will receieve a client ID and a client secret. The client ID is considered public information and is used to build login URLs or included in source code. The client secret **must** be kept confidential.

**NOTE:** Application registration has not yet been implemented, so for now all requests should be  made with the following client ID and client secret:

```
CLIENT_ID: dd031b32d2f56c990b1425efe6c42ad847e7fe3ab46bf1299f05ecd856bdb7dd
CLIENT_SECRET: 54d7307928f63414defd96399fc31ba847961ceaecef3a5fd93144e960c0e151
```

# Grant Types

OAuth 2 provides several grant types for different use cases. The grant types defined are:

- **Authorization Code** for apps running on a web server, browser-based and and mobile apps
- **Password** for logging in with a username and Password
- **Client Credentials** for application access
# Group Characters & People

## Anime Characters [/anime-characters/{id}]

+ Parameters
    + id (number, `1`) - ID of the anime character

+ Attributes (animeCharactersAttributes)

### GET List [GET /anime-characters]

+ Response 200 (application/vnd.api+json)
    + Attributes
        + data (array)
            + (animeCharacters)
        + meta (object)
            + count: 109379 (number)
        + links (object)
            + first: `https://kitsu.io/api/edge/anime-characters?page%5Blimit%5D=10&page%5Boffset%5D=0` (string)
            + next: `https://kitsu.io/api/edge/anime-characters?page%5Blimit%5D=10&page%5Boffset%5D=10` (string)
            + last: `https://kitsu.io/api/edge/anime-characters?page%5Blimit%5D=10&page%5Boffset%5D=109369` (string)


### GET Single [GET]

+ Response 200 (application/vnd.api+json)
    + Attributes
        + data (animeCharacters)
## Anime Productions [/anime-productions/{id}]

+ Parameters
    + id (number, `1`)

+ Attributes (animeProductionsAttributes)

### GET List [GET /anime-productions]

+ Response 200 (application/vnd.api+json)
    + Attributes
        + data (array)
            + (animeProductions)
        + meta (object)
            + count: 109379 (number)
        + links (object)
            + first: `https://kitsu.io/api/edge/anime-productions?page%5Blimit%5D=10&page%5Boffset%5D=0` (string)
            + next: `https://kitsu.io/api/edge/anime-productions?page%5Blimit%5D=10&page%5Boffset%5D=10` (string)
            + last: `https://kitsu.io/api/edge/anime-productions?page%5Blimit%5D=10&page%5Boffset%5D=28387` (string)


### GET Single [GET]

+ Response 200 (application/vnd.api+json)
    + Attributes
        + data (animeProductions)
## Anime Staff [/anime-staff]

### GET [GET]

+ Response 200
## Castings [/castings]

### GET [GET]

+ Response 200
## Characters [/characters]

### GET [GET]

+ Response 200
## Manga Characters [/manga-characters]

### GET [GET]

+ Response 200
## Manga Staff [/manga-staff]

### GET [GET]

+ Response 200
## People [/people]

### GET [GET]

+ Response 200
## Producers [/producers]

### GET [GET]

+ Response 200
# Group Groups





# Group Media














# Group Posts





# Group Reviews



# Group Site Announcements


# Group Users











# Data Structures

## animeCharactersAttributes (object)
+ role: main (string)

## animeCharacters (object)
+ id: 1 (string)
+ type: animeCharacters (enum)
  + animeCharacters
+ links (object)
    + self: `https://kitsu.io/api/edge/anime-characters/1`
+ attributes (animeCharactersAttributes)
+ relationships (object)
    + anime (object)
        + links (object)
            + self: `https://kitsu.io/api/edge/anime-characters/1/relationships/anime` (string)
            + related: `https://kitsu.io/api/edge/anime-characters/1/anime` (string)
    + character (object)
            + self: `https://kitsu.io/api/edge/anime-characters/1/relationships/character` (string)
            + related: `https://kitsu.io/api/edge/anime-characters/1/character` (string)
    + castings (object)
            + self: `https://kitsu.io/api/edge/anime-characters/1/relationships/castings` (string)
            + related: `https://kitsu.io/api/edge/anime-characters/1/castings` (string)
## animeProductionsAttributes (object)
+ role: producer (string)

## animeProductions (object)
+ id: 1 (string)
+ type: animeProductions (enum)
  + animeProductions
+ links (object)
    + self: `https://kitsu.io/api/edge/anime-productions/1`
+ attributes (animeCharactersAttributes)
+ relationships (object)
    + anime (object)
        + links (object)
            + self: `https://kitsu.io/api/edge/anime-productions/1/relationships/anime` (string)
            + related: `https://kitsu.io/api/edge/anime-productions/1/anime` (string)
    + producer (object)
            + self: `https://kitsu.io/api/edge/anime-productions/1/relationships/character` (string)
            + related: `https://kitsu.io/api/edge/anime-productions/1/producer` (string)














































